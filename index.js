// ======================================
// CONFIGURA√á√ïES INICIAIS (ATUALIZADAS)
// ======================================
const express = require('express');
const app = express();
const PORT = process.env.PORT || 10000;
const fs = require('fs');
const path = require('path');
const qrcode = require('qrcode');
const { Client, LocalAuth } = require('whatsapp-web.js');

// Debug inicial
console.log('=== INICIALIZANDO BOT ===');
console.log('Node.js:', process.version);
console.log('Mem√≥ria:', JSON.stringify(process.memoryUsage()));
console.log('=========================');

// Controle de conex√£o refor√ßado
let isConnected = false;
let reconexoes = 0;
const MAX_RECONEXOES = 3;

// Configura√ß√£o do servidor
app.use(express.static('public'));

// Rotas
app.get('/qrcode', (req, res) => {
    res.sendFile(path.join(__dirname, 'public/qrcode.png'));
});

app.get('/health', (req, res) => {
    res.status(isConnected ? 200 : 503).json({
        status: isConnected ? 'online' : 'offline',
        reconexoes
    });
});

app.get('/', (req, res) => {
    res.send(`
        <h1>ü§ñ Bot WhatsApp</h1>
        <p>Status: ${isConnected ? 'ONLINE' : 'OFFLINE'}</p>
        <a href="/qrcode">Ver QR Code</a>
    `);
});

// ======================================
// CLIENT WHATSAPP (CONFIGURA√á√ÉO FORTALECIDA)
// ======================================
const client = new Client({
    authStrategy: new LocalAuth({
        dataPath: './sessions',
        clientId: 'bot-loja-' + Math.random().toString(36).substring(2) // ID √∫nico
    }),
    puppeteer: {
        headless: true,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--single-process'
        ],
        executablePath: process.env.PUPPETEER_EXECUTABLE_PATH || null
    },
    webVersionCache: {
        type: 'remote',
        remotePath: 'https://raw.githubusercontent.com/wppconnect-team/wa-version/main/html/2.2412.54.html'
    }
});

// ======================================
// GERENCIAMENTO DE CONEX√ÉO (REVISADO)
// ======================================
client.on('qr', async qr => {
    console.log('\n=== NOVO QR CODE GERADO ===');
    try {
        if (!fs.existsSync('public')) fs.mkdirSync('public');
        
        await qrcode.toFile('public/qrcode.png', qr, {
            width: 400,
            margin: 2,
            errorCorrectionLevel: 'H'
        });
        
        console.log('üì≤ QR Code dispon√≠vel em: /qrcode');
        console.log(`‚è≥ Validade: ~2 minutos`);
    } catch (err) {
        console.error('‚ùå Erro ao gerar QR:', err);
    }
});

client.on('authenticated', () => {
    isConnected = true;
    reconexoes = 0;
    console.log('\n‚úÖ AUTENTICADO NO WHATSAPP!');
});

client.on('ready', () => {
    isConnected = true;
    console.log('\nüöÄ BOT PRONTO PARA MENSAGENS!');
    console.log('üí¨ Envie "menu" para testar');
});

client.on('disconnected', async (reason) => {
    isConnected = false;
    reconexoes++;
    
    console.log('\n=== DESCONEX√ÉO DETECTADA ===');
    console.log('Motivo:', reason);
    console.log('Tentativas de reconex√£o:', reconexoes);
    
    if (reconexoes <= MAX_RECONEXOES) {
        console.log(`‚è≥ Reconectando em 15s... (${reconexoes}/${MAX_RECONEXOES})`);
        await delay(15000);
        client.initialize();
    } else {
        console.log('‚ùå Limite de reconex√µes atingido!');
        process.exit(1);
    }
});

// ======================================
// HANDLER DE MENSAGENS (COM DEBUG)
// ======================================
client.on('message', async (msg) => {
    try {
        console.log('\nüì© Mensagem recebida:', {
            from: msg.from,
            body: msg.body,
            type: msg.type,
            isGroupMsg: msg.isGroupMsg
        });

        // Ignora mensagens do pr√≥prio bot ou quando offline
        if (msg.fromMe || !isConnected) {
            console.log('Ignorando mensagem (fromMe ou offline)');
            return;
        }

        const chat = await msg.getChat();
        const contact = await msg.getContact();
        const nome = contact.pushname || 'Cliente';
        const comando = msg.body.trim().toLowerCase();

        console.log('Processando comando:', comando);

        // Fluxo principal
        if (/^(menu|oi|ola|ol√°|inicio|in√≠cio)$/i.test(comando)) {
            await enviarMenu(chat, nome);
            return;
        }

        // Respostas autom√°ticas
        const respostas = {
            '1': 'üìû Um vendedor entrar√° em contato em breve! (N√∫mero do pedido: #' + Math.floor(Math.random() * 1000) + ')',
            '2': 'üí∞ Para consultar pagamentos, envie:\n‚Ä¢ CPF/CNPJ\n‚Ä¢ Nome completo',
            '3': 'üíº Envie seu CV para rh@empresa.com com:\n- Nome\n- Vaga desejada\n- Telefone',
            '4': 'üîî Voc√™ agora receber√° nossas promo√ß√µes!',
            '5': 'üìç Nossa loja f√≠sica:\nAv. Principal, 123\nHor√°rio: 9h-18h\nhttps://maps.app.goo.gl/xxxx'
        };

        if (respostas[comando]) {
            await enviarComDigitando(chat, respostas[comando]);
        } else if (/^[1-5]$/.test(comando)) {
            await enviarComDigitando(chat, '‚ùå Op√ß√£o inv√°lida. Digite *MENU* para ver as op√ß√µes.');
        }
    } catch (err) {
        console.error('‚ùå ERRO NO HANDLER:', err);
    }
});

// ======================================
// FUN√á√ïES AUXILIARES
// ======================================
async function enviarComDigitando(chat, mensagem, tempo = 2000) {
    try {
        await chat.sendStateTyping();
        await delay(tempo);
        const msgEnviada = await client.sendMessage(chat.id._serialized, mensagem);
        console.log('‚úì Mensagem enviada:', msgEnviada.body);
    } catch (err) {
        console.error('Erro ao enviar mensagem:', err);
        throw err;
    }
}

async function enviarMenu(chat, nome) {
    const menu = `
*${saudacao()} ${nome}!* üëã

Escolha uma op√ß√£o:
1Ô∏è‚É£ Atendimento
2Ô∏è‚É£ Financeiro
3Ô∏è‚É£ Trabalhe conosco
4Ô∏è‚É£ Promo√ß√µes
5Ô∏è‚É£ Localiza√ß√£o

_Digite o n√∫mero da op√ß√£o_
`;
    await enviarComDigitando(chat, menu);
}

function saudacao() {
    const hora = new Date().getHours();
    return hora < 12 ? 'Bom dia' : hora < 18 ? 'Boa tarde' : 'Boa noite';
}

function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// ======================================
// INICIALIZA√á√ÉO SEGURA
// ======================================
console.log('\n=== INICIANDO BOT ===');
client.initialize()
    .then(() => console.log('Inicializa√ß√£o iniciada...'))
    .catch(err => {
        console.error('‚ùå FALHA NA INICIALIZA√á√ÉO:', err);
        process.exit(1);
    });

app.listen(PORT, () => {
    console.log(`\nüåê Servidor rodando na porta ${PORT}`);
    console.log(`üîç Health check: /health`);
    console.log(`üì≤ QR Code: /qrcode`);
});